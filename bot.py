# telegram_bot.py
import logging
import asyncio
import yaml
import os
from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    filters,
    ContextTypes,
    CallbackQueryHandler
)
from telegram.error import TelegramError
from typing import Dict, Any, Optional
from datetime import datetime

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–æ–≤—É—é –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é RAG-—Å–∏—Å—Ç–µ–º—É
from main import AsyncRAGSystem, RAGConfig

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s - ChatID: %(chat_id)s',
    handlers=[
        logging.FileHandler("bot.log", encoding='utf-8'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
_config = {}
_user_responses = {}  # {user_id: {"query": str, "response": str, "message_id": int, "timestamp": datetime}}
_rag_system: Optional[AsyncRAGSystem] = None
_user_sessions = {}  # –î–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ—Å—Å–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π


def load_config() -> Dict[str, Any]:
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏–∑ —Ñ–∞–π–ª–∞ settings.yaml."""
    try:
        with open("settings.yaml", "r", encoding="utf-8") as f:
            config = yaml.safe_load(f)
        logger.info("–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –∏–∑ settings.yaml")
        return config
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {str(e)}")
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        return {
            "telegram_token": os.getenv("TELEGRAM_BOT_TOKEN", ""),
            "folder_path": os.getenv("RAG_DOCS_PATH", "docs/"),
            "faiss_path": os.getenv("RAG_FAISS_PATH", "vector_store/faiss_index"),
            "neo4j_uri": os.getenv("NEO4J_URI", "bolt://localhost:7687"),
            "neo4j_user": os.getenv("NEO4J_USER", "neo4j"),
            "neo4j_password": os.getenv("NEO4J_PASSWORD", "neo4jneo4j"),
        }


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start."""
    try:
        if not update.effective_user or not update.message or not update.effective_chat:
            logger.error("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ start")
            return

        user = update.effective_user
        chat_id = update.effective_chat.id
        logger.info(
            f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.id} ({user.username or '–±–µ–∑ –∏–º–µ–Ω–∏'}) –∑–∞–ø—É—Å—Ç–∏–ª –±–æ—Ç–∞",
            extra={"chat_id": chat_id}
        )

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–µ—Å—Å–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        _user_sessions[user.id] = {
            "start_time": datetime.now(),
            "queries_count": 0,
            "last_activity": datetime.now()
        }

        welcome_message = (
            f"üëã –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {user.first_name or '–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'}!\n\n"
            "ü§ñ –Ø ‚Äî –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π RAG-—Å–∏—Å—Ç–µ–º–æ–π.\n"
            "üìö –†–∞–±–æ—Ç–∞—é —Å –±–∞–∑–æ–π –∑–Ω–∞–Ω–∏–π –∏ –∏—Å–ø–æ–ª—å–∑—É—é:\n"
            "  ‚Ä¢ –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É –∑–∞–ø—Ä–æ—Å–æ–≤\n"
            "  ‚Ä¢ –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –±—ã—Å—Ç—Ä—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤\n"
            "  ‚Ä¢ –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –≤–µ–∫—Ç–æ—Ä–Ω—ã–π –ø–æ–∏—Å–∫\n"
            "  ‚Ä¢ –ì–∏–±—Ä–∏–¥–Ω—É—é –∞–≥—Ä–µ–≥–∞—Ü–∏—é —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤\n\n"
            "üí¨ –ó–∞–¥–∞–π—Ç–µ –º–Ω–µ –≤–æ–ø—Ä–æ—Å, –∏ —è –Ω–∞–π–¥—É –æ—Ç–≤–µ—Ç –≤ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ö!\n\n"
            "‚ÑπÔ∏è –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø—Ä–∞–≤–∫–∏ –≤–≤–µ–¥–∏—Ç–µ /help\n"
            "üìä –î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≤–≤–µ–¥–∏—Ç–µ /stats"
        )
        await update.message.reply_text(welcome_message)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ start: {str(e)}", exc_info=True)
        if update.message:
            await update.message.reply_text(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            )


async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help."""
    try:
        if not update.effective_chat or not update.message:
            logger.error("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ help_command")
            return

        chat_id = update.effective_chat.id
        logger.info("–ó–∞–ø—Ä–æ—à–µ–Ω–∞ —Å–ø—Ä–∞–≤–∫–∞", extra={"chat_id": chat_id})

        help_text = (
            "üîç *–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º:*\n\n"
            "1Ô∏è‚É£ –ó–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å –≤ —á–∞—Ç–µ (–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è PDF, DOCX, TXT –¥–æ–∫—É–º–µ–Ω—Ç—ã)\n"
            "2Ô∏è‚É£ –ë–æ—Ç –Ω–∞–π–¥–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é —Å –ø–æ–º–æ—â—å—é —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞:\n"
            "   ‚Ä¢ –í–µ–∫—Ç–æ—Ä–Ω—ã–π –ø–æ–∏—Å–∫ (FAISS)\n"
            "   ‚Ä¢ BM25 –∞–ª–≥–æ—Ä–∏—Ç–º\n"
            "   ‚Ä¢ –ì—Ä–∞—Ñ–æ–≤–∞—è –±–∞–∑–∞ –∑–Ω–∞–Ω–∏–π (Neo4j)\n"
            "3Ô∏è‚É£ –ü–æ–ª—É—á–∏—Ç–µ —Ç–æ—á–Ω—ã–π –æ—Ç–≤–µ—Ç —Å –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º–∏\n"
            "4Ô∏è‚É£ –û—Ü–µ–Ω–∏—Ç–µ –æ—Ç–≤–µ—Ç –∫–Ω–æ–ø–∫–∞–º–∏ üëç/üëé\n"
            "5Ô∏è‚É£ –ü–æ—Å–º–æ—Ç—Ä–∏—Ç–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏\n\n"
            "*üõ† –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:*\n"
            "‚Ä¢ `/start` ‚Äî –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º\n"
            "‚Ä¢ `/help` ‚Äî –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É\n"
            "‚Ä¢ `/stats` ‚Äî –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–∞–±–æ—Ç—ã —Å–∏—Å—Ç–µ–º—ã\n"
            "‚Ä¢ `/clear` ‚Äî –û—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é –∑–∞–ø—Ä–æ—Å–æ–≤\n\n"
            "*‚ö° –û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏:*\n"
            "‚Ä¢ –ë—ã—Å—Ç—Ä—ã–µ –æ—Ç–≤–µ—Ç—ã –±–ª–∞–≥–æ–¥–∞—Ä—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—é\n"
            "‚Ä¢ –í—ã—Å–æ–∫–∞—è —Ç–æ—á–Ω–æ—Å—Ç—å –±–ª–∞–≥–æ–¥–∞—Ä—è –ø–µ—Ä–µ—Ä–∞–Ω–∂–∏—Ä–æ–≤–∫–µ\n"
            "‚Ä¢ –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –±–æ–ª—å—à–∏—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤\n"
            "‚Ä¢ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"
        )
        await update.message.reply_text(help_text, parse_mode="Markdown")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ help_command: {str(e)}", exc_info=True)
        if update.message:
            await update.message.reply_text(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            )


async def stats_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /stats - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–∏—Å—Ç–µ–º—ã."""
    global _rag_system

    try:
        if not update.effective_chat or not update.message:
            return

        chat_id = update.effective_chat.id
        user_id = update.effective_user.id if update.effective_user else 0

        logger.info("–ó–∞–ø—Ä–æ—à–µ–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", extra={"chat_id": chat_id})

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –æ–±—Ä–∞–±–æ—Ç–∫–∏
        await context.bot.send_chat_action(chat_id=chat_id, action="typing")

        if not _rag_system:
            await update.message.reply_text("‚ùå RAG-—Å–∏—Å—Ç–µ–º–∞ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
            return

        # –ü–æ–ª—É—á–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏ —Å–∏—Å—Ç–µ–º—ã
        try:
            metrics = _rag_system.get_metrics()

            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_session = _user_sessions.get(user_id, {})
            user_queries = user_session.get("queries_count", 0)

            stats_text = (
                "üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ RAG-—Å–∏—Å—Ç–µ–º—ã:*\n\n"
                f"üî¢ –í—Å–µ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤: `{metrics.get('total_queries', 0)}`\n"
                f"‚úÖ –£—Å–ø–µ—à–Ω—ã—Ö: `{metrics.get('successful_queries', 0)}`\n"
                f"‚ùå –ù–µ—É–¥–∞—á–Ω—ã—Ö: `{metrics.get('failed_queries', 0)}`\n"
                f"üìà –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: `{metrics.get('success_rate', '0%')}`\n"
                f"‚è± –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞: `{metrics.get('average_response_time', '0s')}`\n\n"

                "üíæ *–ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ:*\n"
                f"üéØ –ü–æ–ø–∞–¥–∞–Ω–∏–π –≤ –∫—ç—à: `{metrics.get('cache_hits', 0)}`\n"
                f"üí® –ü—Ä–æ–º–∞—Ö–æ–≤ –∫—ç—à–∞: `{metrics.get('cache_misses', 0)}`\n"
                f"üìä –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∫—ç—à–∞: `{metrics.get('hit_rate', '0%')}`\n\n"

                "üë§ *–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:*\n"
                f"üìù –í–∞—à–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤: `{user_queries}`\n"
                f"üïê –ù–∞—á–∞–ª–æ —Å–µ—Å—Å–∏–∏: `{user_session.get('start_time', 'N/A')}`"
            )

            await update.message.reply_text(stats_text, parse_mode="Markdown")

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –º–µ—Ç—Ä–∏–∫: {e}")
            await update.message.reply_text(
                "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–∏—Å—Ç–µ–º—ã"
            )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ stats_command: {str(e)}", exc_info=True)
        if update.message:
            await update.message.reply_text(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"
            )


async def clear_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /clear - –æ—á–∏—â–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    try:
        if not update.effective_user or not update.message:
            return

        user_id = update.effective_user.id

        # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if user_id in _user_responses:
            del _user_responses[user_id]

        if user_id in _user_sessions:
            _user_sessions[user_id]["queries_count"] = 0
            _user_sessions[user_id]["last_activity"] = datetime.now()

        await update.message.reply_text(
            "üßπ –ò—Å—Ç–æ—Ä–∏—è –≤–∞—à–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –æ—á–∏—â–µ–Ω–∞!"
        )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ clear_command: {str(e)}", exc_info=True)


async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π RAG-—Å–∏—Å—Ç–µ–º—ã."""
    global _rag_system

    try:
        if not update.effective_user or not update.message or not update.effective_chat:
            logger.error("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ handle_message")
            return

        user_id = update.effective_user.id
        chat_id = update.effective_chat.id
        query = update.message.text.strip() if update.message.text else ""

        if not query:
            return

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if user_id in _user_sessions:
            _user_sessions[user_id]["queries_count"] += 1
            _user_sessions[user_id]["last_activity"] = datetime.now()

        logger.info(f"–ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å: {query[:100]}...", extra={"chat_id": chat_id})

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é RAG-—Å–∏—Å—Ç–µ–º—ã
        if not _rag_system:
            await update.message.reply_text(
                "‚ùå –°–∏—Å—Ç–µ–º–∞ –Ω–µ –≥–æ—Ç–æ–≤–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
            )
            return

        # –û—Ç–ø—Ä–∞–≤–∫–∞ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ –Ω–∞–±–æ—Ä–∞ —Ç–µ–∫—Å—Ç–∞
        await context.bot.send_chat_action(chat_id=chat_id, action="typing")

        # –°–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
        processing_message = await update.message.reply_text("‚è≥ –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –∑–∞–ø—Ä–æ—Å...")

        try:
            # –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞
            response = await _rag_system.process_query(query, include_time=True)

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏–Ω—É –æ—Ç–≤–µ—Ç–∞ (Telegram –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ—Ç 4096 —Å–∏–º–≤–æ–ª–æ–≤)
            if len(response) > 4000:
                # –†–∞–∑–±–∏–≤–∞–µ–º –¥–ª–∏–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç –Ω–∞ —á–∞—Å—Ç–∏
                parts = [response[i:i + 4000] for i in range(0, len(response), 4000)]

                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–µ—Ä–≤—É—é —á–∞—Å—Ç—å —Å –∫–Ω–æ–ø–∫–∞–º–∏
                keyboard = InlineKeyboardMarkup([
                    [
                        InlineKeyboardButton("üëç", callback_data="feedback_good"),
                        InlineKeyboardButton("üëé", callback_data="feedback_bad"),
                        InlineKeyboardButton("üìö –ò—Å—Ç–æ—á–Ω–∏–∫–∏", callback_data="show_sources")
                    ],
                    [
                        InlineKeyboardButton("üìä –ú–µ—Ç—Ä–∏–∫–∏", callback_data="show_metrics")
                    ]
                ])

                sent_message = await update.message.reply_text(
                    parts[0] + "\n\n*(–ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ —Å–ª–µ–¥—É–µ—Ç...)*",
                    reply_markup=keyboard,
                    parse_mode="Markdown"
                )

                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ —á–∞—Å—Ç–∏
                for part in parts[1:]:
                    await update.message.reply_text(part, parse_mode="Markdown")

            else:
                # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –∫–Ω–æ–ø–∫–∞–º–∏
                keyboard = InlineKeyboardMarkup([
                    [
                        InlineKeyboardButton("üëç", callback_data="feedback_good"),
                        InlineKeyboardButton("üëé", callback_data="feedback_bad"),
                        InlineKeyboardButton("üìö –ò—Å—Ç–æ—á–Ω–∏–∫–∏", callback_data="show_sources")
                    ],
                    [
                        InlineKeyboardButton("üìä –ú–µ—Ç—Ä–∏–∫–∏", callback_data="show_metrics")
                    ]
                ])

                # –û—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ–ª–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
                sent_message = await update.message.reply_text(
                    response,
                    reply_markup=keyboard,
                    parse_mode="Markdown"
                )

            # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –æ–±—Ä–∞–±–æ—Ç–∫–µ
            await processing_message.delete()

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –ø–æ–∫–∞–∑–∞ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
            _user_responses[user_id] = {
                "query": query,
                "response": response,
                "message_id": sent_message.message_id,
                "timestamp": datetime.now()
            }

            logger.info(f"–ó–∞–ø—Ä–æ—Å —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}", extra={"chat_id": chat_id})

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞: {str(e)}", exc_info=True, extra={"chat_id": chat_id})

            # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –æ–±—Ä–∞–±–æ—Ç–∫–µ
            try:
                await processing_message.delete()
            except:
                pass

            error_message = (
                "‚ùå *–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞*\n\n"
                f"–û–ø–∏—Å–∞–Ω–∏–µ: `{str(e)[:200]}...`\n\n"
                "üîÑ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ:\n"
                "‚Ä¢ –ü–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å\n"
                "‚Ä¢ –ü–æ–≤—Ç–æ—Ä–∏—Ç—å –∑–∞–ø—Ä–æ—Å —á–µ—Ä–µ–∑ –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è\n"
                "‚Ä¢ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—É /help –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏"
            )
            await update.message.reply_text(error_message, parse_mode="Markdown")

    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ —Å–æ–æ–±—â–µ–Ω–∏–π: {str(e)}", exc_info=True)
        try:
            if update.message:
                await update.message.reply_text(
                    "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
                )
        except:
            pass


async def handle_feedback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏."""
    global _rag_system

    try:
        if not update.callback_query or not update.effective_user or not update.effective_chat:
            logger.error("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ handle_feedback")
            return

        query = update.callback_query
        user_id = update.effective_user.id
        chat_id = update.effective_chat.id

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if user_id not in _user_responses:
            await query.answer("‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–∞—à–µ–º –∑–∞–ø—Ä–æ—Å–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
            return

        user_data = _user_responses[user_id]

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ç–∏–ø–æ–≤ callback'–æ–≤
        if query.data == "feedback_good":
            await query.answer("‚úÖ –°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–π –æ—Ç–∑—ã–≤!")
            logger.info(f"–ü–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–π –æ—Ç–∑—ã–≤ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}", extra={"chat_id": chat_id})

        elif query.data == "feedback_bad":
            await query.answer("üìù –°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ç–∑—ã–≤! –ú—ã —Ä–∞–±–æ—Ç–∞–µ–º –Ω–∞–¥ —É–ª—É—á—à–µ–Ω–∏–µ–º.")
            logger.info(f"–û—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–π –æ—Ç–∑—ã–≤ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}", extra={"chat_id": chat_id})

        elif query.data == "show_sources":
            await query.answer("üìö –ü–æ–∫–∞–∑—ã–≤–∞—é –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏")

            sources_text = (
                "üìö *–ò—Å—Ç–æ—á–Ω–∏–∫–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏:*\n\n"
                f"üîç –ó–∞–ø—Ä–æ—Å: `{user_data.get('query', '')[:100]}...`\n"
                f"üïê –í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: `{user_data.get('timestamp', 'N/A')}`\n\n"
                "üìÑ *–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–µ –º–µ—Ç–æ–¥—ã –ø–æ–∏—Å–∫–∞:*\n"
                "‚Ä¢ üîç –í–µ–∫—Ç–æ—Ä–Ω—ã–π –ø–æ–∏—Å–∫ (FAISS)\n"
                "‚Ä¢ üìä BM25 –∞–ª–≥–æ—Ä–∏—Ç–º\n"
                "‚Ä¢ üåê –ì—Ä–∞—Ñ–æ–≤–∞—è –±–∞–∑–∞ –∑–Ω–∞–Ω–∏–π (Neo4j)\n"
                "‚Ä¢ üîÑ –ì–∏–±—Ä–∏–¥–Ω–∞—è –∞–≥—Ä–µ–≥–∞—Ü–∏—è (RRF)\n"
                "‚Ä¢ üéØ –ü–µ—Ä–µ—Ä–∞–Ω–∂–∏—Ä–æ–≤–∫–∞ (CrossEncoder)\n\n"
                "‚ÑπÔ∏è *–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ:* –î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∏—Å—Ç–æ—á–Ω–∏–∫–∞—Ö "
                "–¥–æ—Å—Ç—É–ø–Ω–∞ –≤ –ª–æ–≥–∞—Ö —Å–∏—Å—Ç–µ–º—ã."
            )

            await context.bot.send_message(
                chat_id=chat_id,
                text=sources_text,
                reply_to_message_id=user_data.get("message_id"),
                parse_mode="Markdown"
            )

        elif query.data == "show_metrics":
            await query.answer("üìä –ü–æ–ª—É—á–∞—é –º–µ—Ç—Ä–∏–∫–∏...")

            if _rag_system:
                try:
                    metrics = _rag_system.get_metrics()
                    metrics_text = (
                        "üìä *–ú–µ—Ç—Ä–∏–∫–∏ —Ç–µ–∫—É—â–µ–≥–æ –æ—Ç–≤–µ—Ç–∞:*\n\n"
                        f"‚ö° –í—Å–µ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ —Å–∏—Å—Ç–µ–º–µ: `{metrics.get('total_queries', 0)}`\n"
                        f"‚úÖ –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: `{metrics.get('success_rate', '0%')}`\n"
                        f"üíæ –ü–æ–ø–∞–¥–∞–Ω–∏–π –≤ –∫—ç—à: `{metrics.get('cache_hits', 0)}`\n"
                        f"üìà –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∫—ç—à–∞: `{metrics.get('hit_rate', '0%')}`\n"
                        f"‚è± –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è: `{metrics.get('average_response_time', '0s')}`\n\n"
                        f"üïê –í—Ä–µ–º—è –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞: `{user_data.get('timestamp', 'N/A')}`"
                    )

                    await context.bot.send_message(
                        chat_id=chat_id,
                        text=metrics_text,
                        reply_to_message_id=user_data.get("message_id"),
                        parse_mode="Markdown"
                    )
                except Exception as e:
                    await context.bot.send_message(
                        chat_id=chat_id,
                        text="‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –º–µ—Ç—Ä–∏–∫–∏",
                        reply_to_message_id=user_data.get("message_id")
                    )

        logger.info(f"–û–±—Ä–∞–±–æ—Ç–∞–Ω callback: {query.data} –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}", extra={"chat_id": chat_id})

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏: {str(e)}", exc_info=True)
        if update.callback_query:
            await update.callback_query.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞.")


async def error_handler(update: object, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ì–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫."""
    logger.error(f"–ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {context.error}", exc_info=context.error)

    # –ü–æ–ø—ã—Ç–∞–µ–º—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ–± –æ—à–∏–±–∫–µ
    if isinstance(update, Update) and update.effective_chat:
        try:
            await context.bot.send_message(
                chat_id=update.effective_chat.id,
                text="‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞. –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —É–≤–µ–¥–æ–º–ª–µ–Ω."
            )
        except:
            pass


async def initialize_rag_system() -> bool:
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è RAG-—Å–∏—Å—Ç–µ–º—ã."""
    global _rag_system, _config

    try:
        logger.info("üîÑ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è RAG-—Å–∏—Å—Ç–µ–º—ã...")

        # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –¥–ª—è RAG-—Å–∏—Å—Ç–µ–º—ã
        rag_config = RAGConfig(
            folder_path=_config.get('folder_path', 'docs/'),
            faiss_path=_config.get('faiss_path', 'vector_store/faiss_index'),
            neo4j_uri=_config.get('neo4j_uri', 'bolt://localhost:7687'),
            neo4j_user=_config.get('neo4j_user', 'neo4j'),
            neo4j_password=_config.get('neo4j_password', 'neo4jneo4j'),
            use_semantic_chunking=_config.get('use_semantic_chunking', True)
        )

        # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä RAG-—Å–∏—Å—Ç–µ–º—ã
        _rag_system = AsyncRAGSystem(rag_config)

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–∏—Å—Ç–µ–º—É
        await _rag_system.initialize()

        logger.info("‚úÖ RAG-—Å–∏—Å—Ç–µ–º–∞ —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
        return True

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ RAG-—Å–∏—Å—Ç–µ–º—ã: {e}", exc_info=True)
        return False


def main_bot() -> int:
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞."""
    global _config

    try:
        # –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        logger.info("üì• –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏...")
        _config = load_config()

        # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –±–æ—Ç–∞
        telegram_token = _config.get("telegram_token") or "7811702895:AAFOpxQUXUbkWrx6ksdXEM_LRRaSjnKur8M"

        if not telegram_token or telegram_token == "YOUR_TELEGRAM_BOT_TOKEN":
            logger.error("‚ùå –¢–æ–∫–µ–Ω Telegram-–±–æ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
            return 1

        # –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –±–æ—Ç–∞
        logger.info("ü§ñ –°–æ–∑–¥–∞–Ω–∏–µ Telegram-–±–æ—Ç–∞...")
        application = Application.builder().token(telegram_token).build()

        # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥
        application.add_handler(CommandHandler("start", start))
        application.add_handler(CommandHandler("help", help_command))
        application.add_handler(CommandHandler("stats", stats_command))
        application.add_handler(CommandHandler("clear", clear_command))

        # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π –∏ callback'–æ–≤
        application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
        application.add_handler(CallbackQueryHandler(handle_feedback))

        # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –æ—à–∏–±–æ–∫
        application.add_error_handler(error_handler)

        # –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è RAG-—Å–∏—Å—Ç–µ–º—ã
        async def post_init(application):
            success = await initialize_rag_system()
            if not success:
                logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å RAG-—Å–∏—Å—Ç–µ–º—É")
                raise RuntimeError("RAG —Å–∏—Å—Ç–µ–º–∞ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")

        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—Å—Ç-–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é
        application.post_init = post_init

        # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
        logger.info("üöÄ –ó–∞–ø—É—Å–∫ Telegram-–±–æ—Ç–∞...")
        application.run_polling(
            allowed_updates=Update.ALL_TYPES,
            drop_pending_updates=True
        )

        return 0

    except Exception as e:
        logger.critical(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}", exc_info=True)
        return 1

    finally:
        # –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ RAG-—Å–∏—Å—Ç–µ–º—ã
        async def cleanup():
            global _rag_system
            if _rag_system:
                logger.info("üîÑ –ó–∞–∫—Ä—ã—Ç–∏–µ RAG-—Å–∏—Å—Ç–µ–º—ã...")
                await _rag_system.close()
                logger.info("‚úÖ RAG-—Å–∏—Å—Ç–µ–º–∞ –∑–∞–∫—Ä—ã—Ç–∞")

        try:
            asyncio.run(cleanup())
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ —Å–∏—Å—Ç–µ–º—ã: {e}")


if __name__ == "__main__":
    exit_code = main_bot()
    exit(exit_code)
